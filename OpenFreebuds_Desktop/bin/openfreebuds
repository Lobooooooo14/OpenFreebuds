#!/usr/bin/env python3
import argparse
import logging
import sys
import urllib.request
import urllib.error

import openfreebuds_applet
import openfreebuds_backend
from openfreebuds_applet import tools, tool_server
from openfreebuds_applet.l18n import t

log_format = "%(levelname)s:%(name)s:%(threadName)s  %(message)s"
description = "Unofficial application to manage HUAWEI FreeBuds device"

parser = argparse.ArgumentParser(description=description)
parser.add_argument("--verbose",
                    default=False, action="store_true",
                    help="Print debug log to console")
parser.add_argument("command",
                    default="", type=str, nargs='?',
                    help="If provided, will send command to httpserver and exit")
args = parser.parse_args()


def main():
    if args.command != "":
        do_command(args.command)
        return

    version, debug = tools.get_version()
    print("openfreebuds version=" + version + " is_debug=" + str(debug))

    setup_logging(debug)
    start_applet()


def do_command(command):
    port = tool_server.get_port()

    try:
        url = "http://localhost:{}/{}".format(port, command)

        with urllib.request.urlopen(url) as f:
            print(f.read().decode("utf8"))

    except urllib.error.URLError:
        print("Failed. Check that app started and web-server is active.")


def start_applet():
    if tools.is_running():
        openfreebuds_backend.show_message(t("application_running_message"),
                                          window_title="OpenFreebuds")
        sys.exit(1)

    openfreebuds_applet.start()


def setup_logging(debug):
    if args.verbose or debug:
        print("Enabled verbose mode")
        logging.basicConfig(level=logging.DEBUG, format=log_format, force=True)
    else:
        logfile = tools.get_log_filename()
        print("Log redirected to file " + logfile + ". Set --verbose flag to see logs here.")
        logging.basicConfig(level=logging.DEBUG, format=log_format, filename=logfile)

    logging.getLogger("asyncio").disabled = True


tools.run_safe(main, "MainThread", True)
